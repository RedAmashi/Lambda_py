import time


def log_function_calls(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        print(f"Calling {func.__name__} with args: {args}, kwargs: {kwargs}")
        print(f"{func.__name__} returned: {result}")
        return result
    return wrapper


@log_function_calls
def multiply_numbers(x, y):
    return x * y


def measure_execution_time(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        print(f"Function {func.__name__} took {time.time() - start:.6f} seconds to execute")
        return result
    return wrapper


@measure_execution_time
def calculate_multiply(numbers):
    tot = 1
    for x in numbers:
        tot *= x
    return tot


class CacheResult:
    def __init__(self, func):
        self.func = func
        self.cache = {}

    def __call__(self, *args, **kwargs):
        if str((args, kwargs)) in self.cache:
            print("Retrieving result from cache...")
            return self.cache[str((args, kwargs))]
        else:
            result = self.func(*args, **kwargs)
            self.cache[str((args, kwargs))] = result
            return result


@CacheResult
def calculate_product(x, y):
    print("Calculating the product of two numbers...")
    return x * y


class RateLimiter:
    def __init__(self, max_calls, period):
        self.max_calls = max_calls
        self.period = period
        self.calls = []

    def __call__(self, func):
        def wrapper(*args, **kwargs):
            t = time.time()
            self.calls = [call for call in self.calls if t - call < self.period]
            if len(self.calls) < self.max_calls:
                self.calls.append(t)
                return func(*args, **kwargs)
            raise Exception("Rate limit exceeded. Please try again later.")
        return wrapper


@RateLimiter(max_calls=5, period=3)
def api_call():
    time.sleep(0.1)
    print("API call executed successfully...")


# Примеры вызовов функций

# Умножение двух чисел
print("Multiply Numbers:")
result_multiply = multiply_numbers(10, 5)
print(f"Result: {result_multiply}\n")

# Умножение списка чисел
print("Calculate Multiply:")
result_calculate_multiply = calculate_multiply([1, 2, 3, 4, 5])
print(f"Result: {result_calculate_multiply}\n")

# Кэширование результатов
print("Calculate Product with Cache:")
print(calculate_product(4, 5))  # Вычисление выполняется
print(calculate_product(4, 5))  # Результат извлекается из кэша
print(calculate_product(5, 7))  # Вычисление выполняется
print(calculate_product(5, 7))  # Результат извлекается из кэша
print(calculate_product(-3, 7))  # Вычисление выполняется
print(calculate_product(-3, 7))  # Результат извлекается из кэша

# Примеры использования RateLimiter
print("API Call with Rate Limiter:")
for _ in range(8):
    try:
        api_call()
    except Exception as e:
        print(f"Error occurred: {e}")

# Ожидание перед повторным вызовом
time.sleep(10)
print("Trying API Call again after waiting...")
try:
    api_call()  # Попытка вызвать api_call снова после ожидания
except Exception as e:
    print(f"Error occurred: {e}")

